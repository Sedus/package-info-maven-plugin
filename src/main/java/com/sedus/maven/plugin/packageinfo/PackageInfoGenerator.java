package com.sedus.maven.plugin.packageinfo;

import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.google.common.reflect.ClassPath;
import org.apache.commons.lang3.StringUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import javax.xml.bind.annotation.XmlRootElement;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Set;

@Mojo(
        name = "generate",
        defaultPhase = LifecyclePhase.GENERATE_SOURCES)
public class PackageInfoGenerator extends AbstractMojo {

    @Parameter(property = "usePackage", required = true)
    protected String usePackage;

    @Parameter(property = "prefixes", required = true)
    private List<Nsprefix> prefixes;

    @Parameter(defaultValue = "${project.build.directory}", readonly = true)
    private File target;

    @Parameter(defaultValue = "generated-sources/xjc", readonly = true)
    private String generateDir;

    public void execute() throws MojoExecutionException, MojoFailureException {
        try {
            writePackageInfo();
            getLog().info("package-info.java has been generated");
        } catch (IOException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        }
    }

    private void writePackageInfo() throws IOException {
        File baseDir = new File(target, generateDir);
        File outputDir = new File(baseDir, usePackage.replace(".", "/"));
        if (!outputDir.exists()) {
            outputDir.mkdirs();
        }
        BufferedWriter out = new BufferedWriter(new FileWriter(new File(outputDir, "package-info.java")));

        out.append("/** Generated by package-info-maven-plugin */");
        out.newLine();
        out.append("@javax.xml.bind.annotation.XmlSchema(");
        out.newLine();
        out.append("elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED,");
        out.newLine();
        if (!prefixes.isEmpty()) {
            out.append("xmlns = {");
            out.newLine();
            for (int i = 0; i < prefixes.size(); i++) {
                Nsprefix prefix = prefixes.get(i);
                out.append("@XmlNs(prefix = \"" + StringUtils.trimToEmpty(prefix.getPrefix()) + "\", namespaceURI = " +
                        "\"" + prefix.getNamespace() + "\")");
                if (i < prefixes.size() - 1) {
                    out.append(",");
                }
                out.newLine();
            }
            out.append("}");
        }
        out.newLine();
        out.append(")");
        out.newLine();
        out.append("package " + usePackage + ";");
        out.newLine();
        out.append("import javax.xml.bind.annotation.XmlNs;");
        out.newLine();
        out.flush();
        out.close();

        getLog().debug(String.format("Generated package-info.java in: ", outputDir.getAbsolutePath()));
    }

    private Set<ClassPath.ClassInfo> getXmlClasses() throws MojoExecutionException {
        try {
            ClassPath classPath = ClassPath.from(this.getClass().getClassLoader());
            ImmutableSet<ClassPath.ClassInfo> allClasses = classPath.getAllClasses();
            getLog().debug(String.format("Total classes on classpath: %d", allClasses.size()));

            // Filter on package
            Set<ClassPath.ClassInfo> filteredClasses = Sets.filter(allClasses, new Predicate<ClassPath.ClassInfo>() {
                @Override
                public boolean apply(ClassPath.ClassInfo input) {
                    if (input.getPackageName().startsWith(usePackage)) {
                        getLog().debug(String.format("Possible class found: %s", input.getName()));
                        boolean annotationPresent = input.load().isAnnotationPresent(XmlRootElement.class);
                        getLog().debug(String.format("Possible target: %b", annotationPresent));
                        return annotationPresent;
                    }
                    return false;
                }
            });
            getLog().debug(String.format("Targeted classes: %d", filteredClasses.size()));
            return filteredClasses;
        } catch (IOException e) {
            throw new MojoExecutionException(e.getMessage(), e);
        }
    }
}
